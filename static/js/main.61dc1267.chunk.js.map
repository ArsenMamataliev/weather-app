{"version":3,"sources":["WeatherTable.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherTable","props","request","query","current","weather_descriptions","temperature","src","weather_icons","alt","styles","h1","color","input","width","border","padding","margin","btn","backgroundColor","App","useState","setCurrent","setRequest","city","setCity","country","setCountry","getWeatherinfo","a","fetch","response","json","weatherInfo","style","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAceA,EAZM,SAACC,GAClB,OACI,gCACI,6BAAKA,EAAMC,QAAQC,QACnB,6BAAKF,EAAMG,QAAQC,uBACnB,8BAAIJ,EAAMG,QAAQE,YAAlB,YACA,qBAAKC,IAAKN,EAAMG,QAAQI,cAAeC,IAAI,SCLjDC,EAAS,CACbC,GAAG,CACDC,MAAO,SAETC,MAAO,CACLC,MAAO,QACPC,OAAQ,OACRC,QAAS,YACTC,OAAQ,QAEVC,IAAK,CACHH,OAAQ,OACRC,QAAS,YACTG,gBAAiB,MACjBP,MAAO,UA2CIQ,MAtCf,WAAe,MAGiBC,mBAAS,IAH1B,mBAGNjB,EAHM,KAGGkB,EAHH,OAIiBD,mBAAS,IAJ1B,mBAINnB,EAJM,KAIGqB,EAJH,OAKWF,mBAAS,IALpB,mBAKNG,EALM,KAKAC,EALA,OAMiBJ,mBAAS,IAN1B,mBAMNK,EANM,KAMGC,EANH,KAQPC,EAAc,uCAAG,8BAAAC,EAAA,sEACEC,MAAM,yFAAD,OAA0FN,EAA1F,aAAmGE,IAD1G,cACfK,EADe,gBAEKA,EAASC,OAFd,OAEfC,EAFe,OAGrBX,EAAWW,EAAY7B,SACvBmB,EAAWU,EAAY/B,SAJF,2CAAH,qDAepB,OACE,gCACE,oBAAIgC,MAASxB,EAAOC,GAApB,yBACA,sBAAMwB,SAXR,SAAuBC,GACvBA,EAAEC,iBACEb,GAAQE,GACVE,KAQA,SACE,gCACI,uBAAOU,KAAK,OAAOC,YAAY,OAAQL,MAASxB,EAAOG,MAAO2B,MAAShB,EAAMiB,SAAU,SAAAL,GAAC,OAAIX,EAAQW,EAAEM,OAAOF,UAC7G,uBAAOF,KAAK,OAAOC,YAAY,UAAUL,MAASxB,EAAOG,MAAO2B,MAASd,EAASe,SAAU,SAAAL,GAAC,OAAIT,EAAWS,EAAEM,OAAOF,UACrH,wBAAQF,KAAK,SAASJ,MAASxB,EAAOQ,IAAtC,2BAGN,cAAC,EAAD,CAAcd,QAAWA,EAASF,QAAWA,QC3CpCyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.61dc1267.chunk.js","sourcesContent":["import React from 'react';\n\nconst WeatherTable = (props) =>{\n    return(\n        <div>\n            <h1>{props.request.query}</h1>\n            <h4>{props.current.weather_descriptions}</h4>\n            <p>{props.current.temperature}&#8451;</p>\n            <img src={props.current.weather_icons} alt=\"\"/>\n        </div>\n    )\n\n};\n\nexport default WeatherTable;","import React, {useState} from 'react';\nimport WeatherTable from './WeatherTable';\n\nconst styles = {\n  h1:{\n    color: 'white'\n  },\n  input: {\n    width: '120px',\n    border: \"none\",\n    padding: '10px 20px',\n    margin: '10px',\n  },\n  btn: {\n    border: 'none',\n    padding: '10px 20px',\n    backgroundColor: 'red',\n    color: 'white'\n  }\n};\n\n\nfunction App() {\n  \n  // States \n  const [current, setCurrent] = useState({});\n  const [request, setRequest] = useState({});\n  const [city, setCity] = useState('');\n  const [country, setCountry] = useState(''); \n\n  const getWeatherinfo = async() => {\n    const response = await fetch(`http://api.weatherstack.com/current?access_key=03ab9d9afb9932b3bc2f396a113039c8&query=${city}, ${country}`);\n    const weatherInfo = await response.json();\n    setCurrent(weatherInfo.current);\n    setRequest(weatherInfo.request);\n    };\n\n    function submitHandler(e) {\n    e.preventDefault();\n    if (city && country) {\n      getWeatherinfo();\n    }\n\n  }\n\n  return (\n    <div >\n      <h1 style = {styles.h1}>WWW.Weather</h1>\n      <form onSubmit ={submitHandler}>\n        <div>\n            <input type=\"text\" placeholder=\"City\"  style = {styles.input} value = {city} onChange={e => setCity(e.target.value)}/>\n            <input type=\"text\" placeholder=\"Country\" style = {styles.input} value = {country} onChange={e => setCountry(e.target.value)}/>\n            <button type=\"submit\" style = {styles.btn} > Search </button>\n        </div>\n        </form>\n      <WeatherTable current = {current} request = {request} /> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}